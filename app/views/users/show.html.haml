%div{:style => "width: 100%;"}
	#map{:style => "width: 100%; height: 300px;"}

.user-image.pull-left
	=image_tag("user.png")
.main-stats.pull-left
	.pull-left
		%h1=current_user.name.titlecase
	.pull-left
		%h5.text-center
			TRIPS
			%br
			%span=@trips.count
	.pull-left
		%h5.text-center
			FLIGHTS
			%br
			%span=@flights.count
	.pull-left
		%h5.text-center
			COUNTRIES
			%br
			%span=@destination_countries.count
	.pull-left
		%h5.text-center
			CITIES
			%br
			%span=@destinations_cities.count
	.clearfix
.clearfix
.more-stats.hide
	#cities.pull-left
		%h5 Destination Cities
		-@destinations_cities.each do |d|
			.city="#{d[0]} (#{d[1]})"
	#countries.pull-left
		%h5 Countries
		-@destination_countries.each do |d|
			.country="#{d[0]} (#{d[1]})"
	#origins.pull-left
		%h5 Trip Origin
		-@origins.each do |d|
			.origin="#{d[0]} (#{d[1]})"
	#trip-years.pull-left
		%h5 Trips by Year
		-@by_year.each do |d|
			.trip-year="#{d[0]} (#{d[1]})"
	#trip-months.pull-left
		%h5 Trips by Month
		-@by_month.each do |d|
			.trip-month="#{d[0]} (#{d[1]})"
	#trip-months.pull-left
		%h5 Trip Starts On
		-@by_day_of_week_leave.each do |d|
			.trip-month="#{d[0]} (#{d[1]})"
	#trip-months.pull-left
		%h5 Trip Ends On
		-@by_day_of_week_return.each do |d|
			.trip-month="#{d[0]} (#{d[1]})"
	.clearfix
.more-or-less-stats.text-center
	=link_to "more stats"
				
-@trips_by_month.each do |monthname, trips|
	.year-header
		%h2=monthname
	.container
		.row
			-trips.each do |trip|
				.span4
					.text-center.trip-box{style: "background: url('#{image_path "sydney.jpg"}');background-size: cover;"}
						- destination = destination_city(trip)
						%h3
							=destination
						in
						%b=trip.flights.first.depart_time.strftime("%B")

						%p
							%b="#{days_visited(trip)} days"

						-trip.flights.each do |flight|
							.hidden
								%div{style: "border-top:1px dotted lightgrey;border-bottom:1px solid lightgrey;"}
								=flight.depart_time
								%br
								=Airport.find(flight.depart_airport).name
								="-"
								=Airport.find(flight.depart_airport).city
								="(#{flight.depart_airport})"
								%br
								to
								%br
								=Airport.find(flight.arrival_airport).name
								="-"
								=Airport.find(flight.arrival_airport).city
								="(#{flight.arrival_airport})"
:javascript
	$(window).bind("load", function() {
		var base_url = "#{@cluster_image}";
		var lineSymbol = {
			path: 'M 0,-1 0,1',
			strokeOpacity: 1,
			scale: 4
		};
		var Tab = #{raw @hash.to_json}
		var Poly = #{@polylines}
		var mapStyle =
		[
			{
				"featureType": "administrative",
				"elementType": "all",
				"stylers": 
				[
					{
						"visibility": "off"
					}
				]
			},

			{
				"featureType": "administrative.country",
				"elementType": "geometry.stroke",
				"stylers": 
				[
					{
						"visibility": "on"
					},
					{
						"color": "#1c1d1f"
					},

					{
						"weight": 0.5
					}
				]
			},
			{
				"featureType": "water",
				"elementType": "all",
				"stylers": 
				[
					{
						"color": "#2e2e31"
					}
				]

			},

			{
				"featureType": "landscape",
				"elementType": "all",
				"stylers": 
				[
					{
						"color": "#dddddd"
					}
				]
			},

			{
				"featureType": "poi",
				"elementType": "all",
				"stylers": 
				[
					{
						"color": "#dddddd"
					}
				]
			},
			{
				"featureType": "road",
				"elementType": "all",
				"stylers": 
				[
					{
						"visibility": "off"
					}
				]
			},

			{
				"featureType": "transit",
				"elementType": "all",
				"stylers": 
				[
					{
						"visibility": "off"
					}
				]
			},

			{
				"featureType": "all",
				"elementType": "labels",
				"stylers": 
				[
					{
						"visibility": "off"
					}
				]
			}
		] 


		handler = Gmaps.build('Google', { markers: { clusterer: undefined  } });
		//gmaps({"polylines"=> { "data" => Poly }})
		handler.buildMap(
			{
				provider: 
					{
						//disableDefaultUI: true
						// pass in other Google Maps API options here
						styles: mapStyle,
						//zoom: "default"
					},
				internal: 
					{
						id: 'map'
					}
			},
			function()
				{
					markers = handler.addMarkers(Tab);
					handler.bounds.extendWith(markers);
					handler.fitMapToBounds();
					handler.addPolylines(Poly, {strokeColor: "#25ce98", strokeWeight: 0.7, strokeOpacity: 1 });
				}
		);        
	});